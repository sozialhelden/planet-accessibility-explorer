export enum TokenType {
  LEFT_PAREN,
  RIGHT_PAREN,
  COMMA,
  ASSIGN,
  PLUS,
  MINUS,
  ASTERISK,
  DOLLAR,
  LEFT_BRACE,
  RIGHT_BRACE,
  GREATER_THAN,
  LESS_THAN,
  SLASH,
  POINT,
  CARET,
  TILDE,
  BANG,
  BACKSLASH,
  QUESTION,
  COLON,
  SINGLE_QUOTE,
  DOUBLE_QUOTE,
  MODULO,
  BOOLEAN_AND,
  BOOLEAN_OR,
  COMPARISON,
  NAME,
  LITERAL,
  NUMBER_LITERAL,
  FLOAT_LITERAL,
  INT_LITERAL,
  STRING_LITERAL,
  BOOLEAN_LITERAL,
  SELECTOR,
  WHITESPACE,
  UNKNOWN,
  EOF,
  INVALID,
  INTERNAL_LEXER_ERROR,
}

export const tokenTypes = [
  TokenType.LEFT_PAREN,
  TokenType.RIGHT_PAREN,
  TokenType.COMMA,
  TokenType.ASSIGN,
  TokenType.PLUS,
  TokenType.MINUS,
  TokenType.ASTERISK,
  TokenType.GREATER_THAN,
  TokenType.LESS_THAN,
  TokenType.BOOLEAN_AND,
  TokenType.BOOLEAN_OR,
  TokenType.SLASH,
  TokenType.CARET,
  TokenType.TILDE,
  TokenType.BANG,
  TokenType.MODULO,
  TokenType.COMPARISON,
  TokenType.BACKSLASH,
  TokenType.QUESTION,
  TokenType.COLON,
  TokenType.SINGLE_QUOTE,
  TokenType.DOUBLE_QUOTE,
  TokenType.NAME,
  TokenType.LITERAL,
  TokenType.NUMBER_LITERAL,
  TokenType.INT_LITERAL,
  TokenType.FLOAT_LITERAL,
  TokenType.STRING_LITERAL,
  TokenType.BOOLEAN_LITERAL,
  TokenType.WHITESPACE,
  TokenType.UNKNOWN,
  TokenType.EOF,
  TokenType.INVALID,
];

/**
 * If the TokenType represents a punctuator (i.e. a token that can split an
 * identifier like '+', this will get its text.
 */
export function punctuator(tokenType: TokenType): string {
  switch (tokenType) {
    case TokenType.LEFT_PAREN:
      return "(";
    case TokenType.RIGHT_PAREN:
      return ")";
    case TokenType.COMMA:
      return ",";
    case TokenType.ASSIGN:
      return "=";
    case TokenType.PLUS:
      return "+";
    case TokenType.MINUS:
      return "-";
    case TokenType.ASTERISK:
      return "*";
    case TokenType.SLASH:
      return "/";
    case TokenType.CARET:
      return "^";
    case TokenType.TILDE:
      return "~";
    case TokenType.BANG:
      return "!";
    case TokenType.BACKSLASH:
      return "\\";
    case TokenType.QUESTION:
      return "?";
    case TokenType.COLON:
      return ":";
    default:
      return "[undefined punctuator]";
  }
}

/**
 * A simple token class. These are generated by Lexer and consumed by Parser.
 */
export type Token = {
  type: TokenType;
  text: string;
  index: number;
};

/**
 * Interface for all expression AST node classes.
 */
export abstract class Expression {
  abstract readonly kind: string;
  abstract tokens: Token[];
  abstract children: (Token | Expression)[];
  /**
   * Pretty-print the expression to a string.
   */
  abstract print(builder: StringBuilder): void;
}

export type StringBuilder = (result: string) => void;
