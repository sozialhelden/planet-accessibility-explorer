{"version":3,"sources":["components/core/BlueprintDarkModeContainer.tsx","components/core/composeContexts.tsx","components/feature/details/ExternalFeatureLink.tsx","components/feature/details/FeatureAddress.tsx","components/feature/details/isAccessibilityRelevantOSMKey.tsx","components/feature/details/isAddressRelevantOSMKey.tsx","components/feature/details/OSMTagTable.tsx","components/feature/details/FeatureDetails.tsx","model/Feature.ts","model/getFeatureDisplayName.ts","model/getFeatureCategoryDisplayName.ts","components/feature/FeatureListPopup.tsx","components/OverflowScrollContainer.tsx","components/map/filterLayers.tsx","components/map/useMapStyle.tsx","components/map/MapView.tsx","components/feature/getFeatureIdsFromLocation.ts","components/App.tsx","components/hooks/useGlobalHotkeys.tsx","reportWebVitals.ts","index.tsx"],"names":["getDarkModeSetting","window","matchMedia","matches","BlueprintDarkModeContainer","props","isDarkMode","React","setIsDarkMode","handleChange","e","undefined","addEventListener","useDarkMode","className","children","composeContexts","contextAndValuePairs","reduce","acc","Context","value","Provider","ExternalFeatureLink","LIST_UNSTYLED","rel","target","href","FeatureAddress","feature","intersperse","compact","map","k","key","properties","accessibilityPrefixes","Set","isAccessibilityRelevantOSMKey","osmKey","has","substr","indexOf","isAddressRelevantOSMKey","StyledTable","styled","OSMTagTable","HTML_TABLE","HTML_TABLE_STRIPED","HTML_TABLE_CONDENSED","join","keys","fetcher","input","init","fetch","then","res","json","Skeleton","omittedKeyPrefixes","FeatureDetails","featureId","url","source","id","data","error","useSWR","intent","JSON","stringify","filteredKeys","Object","sort","a","b","startsWith","filter","find","prefix","accessibilityRelevantKeys","addressRelevantKeys","remainingKeys","difference","osmType","geometry","type","_id","osmId","replace","displayName","ownName","name","loc_name","description","ref","getFeatureDisplayName","categoryName","keysWithKeyAsSuffix","keysWithoutKeyAsSuffix","note","humanize","getFeatureCategoryDisplayName","style","gap","maxWidth","fontWeight","centroid","coordinates","FeatureListPopup","featureIds","content","latitude","longitude","closeButton","closeOnClick","onClose","anchor","OverflowScrollContainer","div","databaseTableNames","useMapStyle","process","loading","ZoomToDataOnLoad","MapContext","MapView","containerRef","width","height","useMeasure","mapRef","useRef","viewport","setViewport","useState","zoom","useLayoutEffect","newViewport","history","useHistory","location","useLocation","match","pathname","featureIdString","uniq","split","s","getFeatureIdsFromLocation","query","URLSearchParams","search","get","handleMapClick","useCallback","event","console","log","selectedFeatureCount","features","length","push","f","lngLat","closePopup","setViewportCallback","viewState","interactionState","mapStyle","layers","layer","tableName","filterLayers","flex","display","visible","position","mapboxApiAccessToken","onViewportChange","interactiveLayerIds","l","onClick","tiles","Number","parseFloat","right","top","mapboxgl","workerClass","require","default","FocusStyleManager","onlyShowFocusOnTabs","AppBody","App","contexts","onSelectFeature","mapView","navbarAndBody","hotkeys","useMemo","combo","global","label","onKeyDown","alert","allowInInput","preventDefault","handleKeyDown","handleKeyUp","flexDirection","onKeyUp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","dotenv","config","enableAllPlugins","enablePatches","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.d82e9b53.chunk.js","sourcesContent":["import { HTMLDivProps } from \"@blueprintjs/core\";\nimport * as React from \"react\";\n\nfunction getDarkModeSetting(): boolean {\n  return (\n    window.matchMedia &&\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n  );\n}\n\n/**\n * A React Hook returning a boolean value that is `true` when the user switched on dark mode,\n * `false` otherwise.\n */\nexport function useDarkMode() {\n  const [isDarkMode, setIsDarkMode] = React.useState(getDarkModeSetting());\n\n  const handleChange = React.useCallback((e) => {\n    setIsDarkMode(getDarkModeSetting());\n  }, []);\n\n  React.useEffect(() => {\n    if (window.matchMedia === undefined) {\n      return;\n    }\n    window\n      .matchMedia(\"(prefers-color-scheme: dark)\")\n      .addEventListener(\"change\", handleChange);\n  }, [handleChange]);\n\n  return isDarkMode;\n}\n\n/**\n * A React component wrapper with a Blueprint CSS class that controls if the container's children\n * are rendered in dark-mode style or not.\n *\n * Wrap your Blueprint.js components in this React component to adapt them to the user's dark mode\n * setting automatically.\n */\nexport default function BlueprintDarkModeContainer(props: HTMLDivProps) {\n  const isDarkMode = useDarkMode();\n  return (\n    <div\n      {...props}\n      className={isDarkMode ? `${props.className} bp3-dark` : props.className}\n    >\n      {props.children}\n    </div>\n  );\n}\n","export type ContextAndValue<T> = [React.Context<T>, T];\n\n/**\n * This function allows you to render a React component with multiple nested React contexts around\n * it, but makes the code doing that more readable.\n *\n * @param contextAndValuePairs an array of [context ref, context value] entries.\n * @param children the react children to render.\n * @example\n * ```jsx\n * const contexts: ContextAndValue<any>[] = [\n *    [SomeContext, someValue],\n *    [UndoContext, undoContext]\n * ];\n * return <div>\n *   {composeContexts(contexts, navbarAndBody)}\n * </div>;\n * ```\n */\n\nconst composeContexts = (\n  contextAndValuePairs: ContextAndValue<any>[],\n  children: React.ReactNode\n) =>\n  contextAndValuePairs.reduce(\n    (acc: React.ReactNode, [Context, value]: ContextAndValue<any>) => {\n      return <Context.Provider value={value}>{acc}</Context.Provider>;\n    },\n    children\n  );\n\nexport default composeContexts;\n","import { LIST_UNSTYLED } from \"@blueprintjs/core/lib/esm/common/classes\";\n\nexport default function ExternalFeatureLink(props: {\n  href: string;\n  children?: React.ReactNode;\n}) {\n  return (\n    <li className={LIST_UNSTYLED}>\n      <a rel=\"noreferrer\" target=\"_blank\" href={props.href}>\n        {props.children}\n      </a>\n    </li>\n  );\n}\n","import intersperse from \"intersperse\";\nimport { compact } from \"lodash\";\nimport Feature from \"../../../model/Feature\";\n\ntype Props = {\n  feature: Feature;\n};\n\nexport default function FeatureAddress(props: Props) {\n  const { feature } = props;\n  const keys = [\n    \"street\",\n    \"housenumber\",\n    \"place\",\n    \"postcode\",\n    \"city\",\n    \"suburb\",\n    \"county\",\n    \"state\",\n    \"country\",\n  ];\n  return (\n    <address>\n      {intersperse(\n        compact(\n          keys\n            .map((k) => `addr:${k}`)\n            .map(\n              (key) =>\n                feature.properties[key] && (\n                  <span>{feature.properties[key]}</span>\n                )\n            )\n        ),\n        <span>, </span>\n      )}\n    </address>\n  );\n}\n","/**\n * Takes a list of OSM keys, and returns a Set of the keys that are relevant for accessibility.\n */\n\nexport const accessibilityPrefixes = new Set([\n  \"access\",\n  \"air_conditioning\",\n  \"automatic_door\",\n  \"bicycle\",\n  \"blind:description\",\n  \"blind\",\n  \"centralkey\",\n  \"changing_table\",\n  \"charge\",\n  \"cycleway\",\n  \"delivery\",\n  \"description:payment\",\n  \"diet\",\n  \"dispensing\",\n  \"door\",\n  \"drinking_water\",\n  \"emergency\",\n  \"entrance\",\n  \"fee\",\n  \"female\",\n  \"foot\",\n  \"gay\",\n  \"handrail\",\n  \"indoor\",\n  \"internet_access\",\n  \"lesbian\",\n  \"level\",\n  \"lgbtq\",\n  \"lit\",\n  \"male\",\n  \"min_age\",\n  \"opening_hours\",\n  \"outdoor_seating\",\n  \"payment\",\n  \"ramp\",\n  \"reservation\",\n  \"room\",\n  \"self_service\",\n  \"sidewalk\",\n  \"smoking\",\n  \"smoothness\",\n  \"step_count\",\n  \"stroller\",\n  \"surface\",\n  \"takeaway\",\n  \"toilet\",\n  \"toilets\",\n  \"unisex\",\n  \"wheelchair:description\",\n  \"wheelchair\",\n  \"winter_service\",\n  \"floating\",\n  \"building:levels\",\n  \"location\",\n]);\n\nexport default function isAccessibilityRelevantOSMKey(osmKey: string): boolean {\n  return (\n    accessibilityPrefixes.has(osmKey) ||\n    accessibilityPrefixes.has(osmKey.substr(0, osmKey.indexOf(\":\")))\n  );\n}\n","/**\n * Takes a list of OSM keys, and returns a Set of the keys that are relevant for accessibility.\n */\n\nexport const accessibilityPrefixes = new Set([\"addr\"]);\n\nexport default function isAddressRelevantOSMKey(osmKey: string): boolean {\n  return (\n    accessibilityPrefixes.has(osmKey) ||\n    accessibilityPrefixes.has(osmKey.substr(0, osmKey.indexOf(\":\")))\n  );\n}\n","import {\n  HTML_TABLE,\n  HTML_TABLE_CONDENSED,\n  HTML_TABLE_STRIPED,\n} from \"@blueprintjs/core/lib/esm/common/classes\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Feature from \"../../../model/Feature\";\n\nconst StyledTable = styled(\"table\")`\n  background-color: rgba(0, 0, 0, 0.05);\n  margin: 1rem 0;\n`;\n\nexport default function OSMTagTable(props: {\n  keys: string[];\n  feature: Feature;\n}) {\n  return (\n    <StyledTable\n      className={[HTML_TABLE, HTML_TABLE_STRIPED, HTML_TABLE_CONDENSED].join(\n        \" \"\n      )}\n    >\n      {props.keys.map((k) => (\n        <tr key={k}>\n          <th>{k}</th>\n          <td>{props.feature.properties[k]}</td>\n        </tr>\n      ))}\n    </StyledTable>\n  );\n}\n","import { Callout, Card, H2, UL } from \"@blueprintjs/core\";\nimport { LIST_UNSTYLED } from \"@blueprintjs/core/lib/esm/common/classes\";\nimport { difference } from \"lodash\";\nimport React from \"react\";\nimport useSWR from \"swr\";\nimport {\n  ErrorResponse,\n  FeatureId,\n  FeatureOrError,\n  isErrorResponse,\n} from \"../../../model/Feature\";\nimport getFeatureCategoryDisplayName from \"../../../model/getFeatureCategoryDisplayName\";\nimport getFeatureDisplayName from \"../../../model/getFeatureDisplayName\";\nimport ExternalFeatureLink from \"./ExternalFeatureLink\";\nimport FeatureAddress from \"./FeatureAddress\";\nimport isAccessibilityRelevantOSMKey from \"./isAccessibilityRelevantOSMKey\";\nimport isAddressRelevantOSMKey from \"./isAddressRelevantOSMKey\";\nimport OSMTagTable from \"./OSMTagTable\";\n\ntype Props = {\n  featureId: FeatureId;\n};\n\nconst fetcher = (input: RequestInfo, init?: RequestInit | undefined) =>\n  fetch(input, init).then((res) => res.json());\n\nfunction Skeleton() {\n  return <div className=\"bp3-skeleton\">Loading...</div>;\n}\n\nconst omittedKeyPrefixes = [\"type\", \"name\", \"area\"];\n\nexport default function FeatureDetails(props: Props) {\n  const { featureId } = props;\n  const url = `${process.env.REACT_APP_OSM_API_BACKEND_URL}/${featureId.source}/${featureId.id}.json`;\n\n  const { data, error } = useSWR<FeatureOrError, ErrorResponse>(url, fetcher);\n\n  if (error) return <Callout intent=\"danger\">{JSON.stringify(error)}</Callout>;\n\n  if (!data) return <Skeleton />;\n\n  if (isErrorResponse(data)) {\n    return <Callout intent=\"danger\">{JSON.stringify(data)}</Callout>;\n  }\n\n  const sortedKeys = Object.keys(data.properties)\n    .sort()\n    .sort((a, b) => {\n      if (a.startsWith(\"name\")) return -1;\n      if (b.startsWith(\"name\")) return 1;\n      return 0;\n    });\n\n  const filteredKeys = sortedKeys.filter(\n    (key) => !omittedKeyPrefixes.find((prefix) => key.startsWith(prefix))\n  );\n\n  const accessibilityRelevantKeys = filteredKeys.filter(\n    isAccessibilityRelevantOSMKey\n  );\n\n  const addressRelevantKeys = filteredKeys.filter(isAddressRelevantOSMKey);\n\n  const remainingKeys = difference(\n    filteredKeys,\n    accessibilityRelevantKeys,\n    addressRelevantKeys\n  );\n\n  const geometryType = data.geometry.type;\n  const osmType =\n    geometryType === \"Point\"\n      ? \"node\"\n      : data._id.startsWith(\"-\")\n      ? \"relation\"\n      : \"way\";\n  const osmId = data._id.replace(/^-/, \"\");\n  const displayName = getFeatureDisplayName(data);\n  const categoryName = getFeatureCategoryDisplayName(data);\n  return (\n    <Card style={{ gap: \"10px\", maxWidth: \"40rem\" }}>\n      <header>\n        <H2>{displayName || categoryName}</H2>\n        {/* If there is no display name, the category name is already displayed above */}\n        {displayName && categoryName && (\n          <p style={{ fontWeight: \"bold\" }}>{categoryName}</p>\n        )}\n        {data.properties.description && <p>{data.properties.description}</p>}\n        <FeatureAddress feature={data} />\n      </header>\n\n      <OSMTagTable keys={accessibilityRelevantKeys} feature={data} />\n\n      <details>\n        <summary>See OpenStreetMap information</summary>\n        <h3>OSM tags</h3>\n        <OSMTagTable keys={remainingKeys} feature={data} />\n        <UL className={LIST_UNSTYLED}>\n          <ExternalFeatureLink\n            href={`https://openstreetmap.org/${osmType}/${osmId}`}\n          >\n            Open on OpenStreetMap\n          </ExternalFeatureLink>\n\n          {osmType !== \"relation\" && (\n            <ExternalFeatureLink\n              href={`https://wheelmap.org/nodes/${\n                osmType === \"way\" ? \"-\" : \"\"\n              }${osmId}`}\n            >\n              Open on Wheelmap\n            </ExternalFeatureLink>\n          )}\n\n          <ExternalFeatureLink\n            href={`https://www.openstreetmap.org/edit?${osmType}=${osmId}#map=19/${data.centroid.coordinates[1]}/${data.centroid.coordinates[0]}`}\n          >\n            Edit with ID Editor\n          </ExternalFeatureLink>\n\n          <ExternalFeatureLink\n            href={`${process.env.REACT_APP_OSM_API_BACKEND_URL}/${featureId.source}/${featureId.id}.geojson`}\n          >\n            Show GeoJSON\n          </ExternalFeatureLink>\n        </UL>\n      </details>\n    </Card>\n  );\n}\n","type Feature = {\n  _id: string;\n  geometry: { coordinates: any; type: \"Polygon\" | \"MultiPolygon\" | \"Point\" };\n  centroid: { coordinates: number[]; type: \"Point\" };\n  properties: Record<string, string>;\n  type: \"Feature\";\n  source: string;\n  sourceLayer: string;\n  error: never;\n};\n\nexport type ErrorResponse = {\n  _id: never;\n  error: string;\n};\n\nexport type FeatureOrError = Feature | ErrorResponse;\n\nexport function isErrorResponse(\n  featureOrError: FeatureOrError\n): featureOrError is ErrorResponse {\n  return featureOrError.error !== undefined;\n}\n\nexport type FeatureId = {\n  source: string;\n  id: string;\n};\n\nexport default Feature;\n","import Feature from \"./Feature\";\n\nexport default function getFeatureDisplayName(feature: Feature) {\n  const properties = feature.properties;\n  const ownName =\n    properties.name ||\n    properties.loc_name ||\n    properties.description ||\n    properties.ref;\n\n  if (ownName) {\n    return ownName;\n  }\n}\n","import { humanize } from \"inflection\";\nimport Feature from \"./Feature\";\n\nexport default function getFeatureCategoryDisplayName(feature: Feature) {\n  const properties = feature.properties;\n\n  const keysWithKeyAsSuffix = [\n    \"studio\",\n    \"office\",\n    \"shop\",\n    \"room\",\n    \"building\",\n    \"landuse\",\n    \"route\",\n  ];\n\n  const keysWithoutKeyAsSuffix = [\n    \"sport\",\n    \"leisure\",\n    \"tourism\",\n    \"shop\",\n    \"amenity\",\n    \"junction\",\n    \"railway\",\n    \"aeroway\",\n    \"man_made\",\n    \"highway\",\n  ];\n\n  for (const key of keysWithKeyAsSuffix) {\n    if (properties[key] === \"yes\") {\n      return (\n        properties.note ||\n        `${humanize(key)} ${properties.ref || properties.note || \"\"}`\n      );\n    }\n  }\n\n  for (const key of keysWithoutKeyAsSuffix) {\n    if (properties[key] && properties[key] !== \"yes\") {\n      return `${humanize(properties[key])} ${properties.ref || \"\"}`;\n    }\n  }\n\n  for (const key of keysWithKeyAsSuffix) {\n    if (properties[key] && properties[key] !== \"yes\") {\n      return `${humanize(properties[key])} ${key} ${properties.ref || \"\"}`;\n    }\n  }\n}\n","import { UL } from \"@blueprintjs/core\";\nimport { LIST_UNSTYLED } from \"@blueprintjs/core/lib/esm/common/classes\";\nimport React from \"react\";\nimport { Popup } from \"react-map-gl\";\nimport { FeatureId } from \"../../model/Feature\";\nimport FeatureDetails from \"./details/FeatureDetails\";\n\ntype Props = {\n  featureIds: FeatureId[];\n  latitude: number;\n  longitude: number;\n  onClose?: () => void;\n};\n\nexport default function FeatureListPopup(props: Props) {\n  const { featureIds } = props;\n  const content = (\n    <UL className={LIST_UNSTYLED}>\n      {featureIds.map((featureId) => (\n        <li\n          className={LIST_UNSTYLED}\n          key={`${featureId.source}/${featureId.id}`}\n        >\n          <FeatureDetails featureId={featureId} />\n        </li>\n      ))}\n    </UL>\n  );\n\n  return (\n    <Popup\n      latitude={props.latitude}\n      longitude={props.longitude}\n      closeButton={true}\n      closeOnClick={false}\n      onClose={props.onClose}\n      anchor=\"top\"\n    >\n      {content}\n    </Popup>\n  );\n}\n","import styled from \"styled-components\";\n\nconst OverflowScrollContainer = styled.div`\n  overflow: auto;\n`;\n\nexport default OverflowScrollContainer;\n","export const databaseTableNames = [\n  \"admin\",\n  \"places\",\n  \"amenities\",\n  \"entrances_or_exits\",\n  \"elevators\",\n  \"ramps\",\n  \"pedestrian_highways\",\n  \"conveying\",\n  \"toilets\",\n  \"buildings\",\n  \"master_routes\",\n  \"master_route_members\",\n  \"routes\",\n  \"route_members\",\n  \"stop_areas\",\n  \"stop_area_members\",\n  \"platforms\",\n  \"stop_positions\",\n  \"stations\",\n];\n\n/**\n * Filter layers from a mapbox-gl stylesheet.\n *\n * Keep only layers that have an `id` matching a 'osm-' prefix, and change sources to match the\n * table names from our OSM database.\n *\n * @param layers The layers to filter\n */\nexport function filterLayers(layers: mapboxgl.Layer[]): mapboxgl.Layer[] {\n  return layers\n    .filter((layer) => layer.id?.startsWith(\"osm-\"))\n    .map((layer) => {\n      // In Mapbox Studio, layers have a source layer reference that uses a random string ID like\n      // 'entrances_or_exits_saarbrueck-0vxz2q'. We need to replace that with the actual table name,\n      // for example 'entrances_or_exits'.\n      const source = databaseTableNames.find((tableName) =>\n        layer[\"source-layer\"]?.startsWith(tableName)\n      );\n\n      return {\n        ...layer,\n        source,\n        \"source-layer\": \"default\",\n      };\n    })\n    .filter((layer) => layer.source);\n}\n","import useSWR from \"swr\";\n\nconst fetcher = (input: RequestInfo, init?: RequestInit | undefined) =>\n  fetch(input, init).then((res) => res.json());\n\nfunction useMapStyle() {\n  const styleId = process.env.REACT_APP_MAPBOX_STYLE_ID;\n  const accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n  const accountId = process.env.REACT_APP_MAPBOX_ACCOUNT_ID;\n\n  const url = `https://api.mapbox.com/styles/v1/${accountId}/${styleId}?fresh=true&access_token=${accessToken}`;\n\n  const { data, error } = useSWR<mapboxgl.Style, { error: any }>(url, fetcher);\n\n  if (error) return { error };\n  if (!data) return { loading: true };\n\n  return { data };\n}\n\nexport default useMapStyle;\n","import mapboxgl from \"mapbox-gl\";\nimport * as React from \"react\";\nimport { useCallback, useLayoutEffect, useRef, useState } from \"react\";\nimport ReactMapGL, {\n  Layer,\n  MapContext,\n  MapEvent,\n  MapRef,\n  NavigationControl,\n  Source,\n  ViewportProps,\n} from \"react-map-gl\";\nimport \"react-map-gl-geocoder/dist/mapbox-gl-geocoder.css\";\nimport { useHistory, useLocation } from \"react-router\";\nimport useMeasure from \"react-use-measure\";\nimport FeatureListPopup from \"../feature/FeatureListPopup\";\nimport getFeatureIdsFromLocation from \"../feature/getFeatureIdsFromLocation\";\nimport OverflowScrollContainer from \"../OverflowScrollContainer\";\nimport { databaseTableNames, filterLayers } from \"./filterLayers\";\nimport useMapStyle from \"./useMapStyle\";\n\n// The following is required to stop \"npm build\" from transpiling mapbox code.\n// notice the exclamation point in the import.\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax, import/no-unresolved\nmapboxgl.workerClass = require(\"worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker\").default;\n\ninterface IProps {\n  featureId?: string;\n  onSelectFeature: (_id: string) => void;\n  className?: string;\n  timestamp?: number;\n  visible?: boolean;\n  children?: React.ReactNode;\n}\n\nfunction ZoomToDataOnLoad() {\n  const mapContext = React.useContext(MapContext);\n\n  if (mapContext.map) {\n    // do something\n  }\n  return null;\n}\n\nexport default function MapView(props: IProps) {\n  const [containerRef, { width, height }] = useMeasure();\n  const mapRef = useRef<MapRef>(null);\n\n  const [viewport, setViewport] = useState<\n    Partial<ViewportProps> & { width: number; height: number }\n  >({\n    width: 100,\n    height: 100,\n    latitude: 52.5,\n    longitude: 13.3,\n    zoom: 10,\n  });\n\n  // Pan to feature boundary if no single feature is selected and the source is loaded for the first time\n  // useEffect(() => {\n  //   if (feature) {\n  //     return;\n  //   }\n\n  //   const map = mapRef.current?.getMap() as Map;\n  //   if (!map) {\n  //     return;\n  //   }\n\n  //   map.once('idle', () => {\n  //     const features = map.querySourceFeatures('features');\n  //     const bounds = new LngLatBounds();\n  //     features\n  //       .filter(f => f.geometry?.coordinates)\n  //       .forEach(feature => bounds.extend(feature.geometry.coordinates));\n  //     if (bounds.isEmpty()) {\n  //       return;\n  //     }\n  //     const northWest = bounds.getNorthWest();\n  //     const southEast = bounds.getSouthEast();\n  //     if (!northWest || !southEast) {\n  //       return;\n  //     }\n  //     if (northWest.distanceTo(southEast) === 0) {\n  //       map.setCenter(bounds.getNorthEast());\n  //     } else {\n  //       map.fitBounds(bounds.toArray() as LngLatBoundsLike, { padding: 100, maxDuration: 0 });\n  //     }\n  //     map.once('idle', () => {\n  //       const newMapCenter = map.getCenter();\n  //       setViewport({ ...viewport, zoom: map.getZoom(), latitude: newMapCenter.lat, longitude: newMapCenter.lng });\n  //     });\n  //   });\n\n  //   // const newViewport = {\n  //   //   ...viewport,\n  //   //   latitude: feature?.geometry.coordinates?.[1],\n  //   //   longitude: feature?.geometry.coordinates?.[0],\n  //   //   zoom: Math.max(10, viewport.zoom || 10),\n  //   // };\n\n  //   // setViewport(newViewport);\n  // }, [mapRef.current]);\n\n  // Pan to single selected map feature, if it exists or changes\n  // useEffect(() => {\n  //   if (!feature || !feature.geometry) {\n  //     return;\n  //   }\n\n  //   const map = mapRef.current?.getMap() as Map;\n  //   if (!map) {\n  //     return;\n  //   }\n  //   const bounds = map.getBounds();\n  //   if (\n  //     viewport?.zoom &&\n  //     viewport?.zoom >= 10 &&\n  //     bounds &&\n  //     bounds.contains(feature.geometry.coordinates)\n  //   ) {\n  //     return;\n  //   }\n\n  //   const newViewport = {\n  //     ...viewport,\n  //     latitude: feature?.geometry.coordinates?.[1],\n  //     longitude: feature?.geometry.coordinates?.[0],\n  //     zoom: Math.max(10, viewport.zoom || 10),\n  //     pitch: 50,\n  //   };\n\n  //   setViewport(newViewport);\n  // }, [mapRef.current, feature?.geometry?.coordinates[0], feature?.geometry?.coordinates[1]]);\n\n  // Reset viewport when map size changes\n  useLayoutEffect(() => {\n    const newViewport = { ...viewport, width, height };\n    setViewport(newViewport);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [width, height]);\n\n  const history = useHistory();\n\n  const location = useLocation();\n  const featureIds = getFeatureIdsFromLocation(location);\n  const query = new URLSearchParams(location.search);\n  const latitude = query.get(\"lat\");\n  const longitude = query.get(\"lon\");\n\n  // const featureLayer = useMemo(() => {\n  //   return generateSelectedFeatureLayer(props.featureId);\n  // }, [props.featureId]);\n\n  // const featureDetailsLayer = useMemo(() => {\n  //   return generateFeatureDetailsLayer(props.featureId);\n  // }, [props.featureId]);\n\n  // const unclusteredPointLabelLayer = useMemo(() => {\n  //   return generateUnclusteredPointLabelLayer(lastImportType, languageTagsStrings, props.featureId);\n  // }, [lastImportType, props.featureId]);\n\n  const handleMapClick = useCallback<(event: MapEvent) => void>(\n    (event) => {\n      console.log(event);\n\n      const selectedFeatureCount = event?.features?.length;\n      if (!selectedFeatureCount) {\n        // Clicked outside of a clickable map feature\n        history.push(\"/\");\n      }\n\n      if (selectedFeatureCount === 1) {\n        const feature = event.features?.[0];\n        // Show source overview again if user just clicks/taps on the map\n        feature &&\n          history.push(\n            `/${feature.source}/${feature.properties.id}?lon=${event.lngLat[0]}&lat=${event.lngLat[1]}`\n          );\n        return;\n      }\n\n      history.push(\n        `/composite/${event.features\n          ?.map((f) => [f.source, f.properties.id].join(\":\"))\n          .join(\",\")}?lon=${event.lngLat[0]}&lat=${event.lngLat[1]}`\n      );\n      return;\n    },\n    [history]\n  );\n\n  const closePopup = useCallback(() => {\n    history.push(`/`);\n  }, [history]);\n\n  const setViewportCallback = useCallback(\n    (viewState, interactionState) => {\n      // console.log('Setting viewport because of callback:', viewState, interactionState);\n      setViewport({ ...viewport, ...viewState });\n    },\n    [setViewport, viewport]\n  );\n\n  // const onLoadCallback = useCallback(() => {\n  // const map = mapRef.current?.getMap();\n  // }, [mapRef.current]);\n\n  const mapStyle = useMapStyle();\n  const layers = React.useMemo(\n    () => mapStyle.data?.layers && filterLayers(mapStyle.data?.layers),\n    [mapStyle]\n  );\n\n  return (\n    // Container needs to hide overflow because it's used for measurement.\n    // Without hiding overflowing content, it would adapt its own size to its overflowing content\n    // size on reducing its size while resizing the viewport, so it would only grow bigger, never\n    // shrink.\n    <OverflowScrollContainer\n      ref={containerRef}\n      className={props.className}\n      style={{\n        flex: 1,\n        display: props.visible === false ? \"none\" : \"block\",\n        position: \"relative\",\n      }}\n    >\n      <ReactMapGL\n        {...viewport}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n        onViewportChange={setViewportCallback}\n        interactiveLayerIds={mapStyle.data?.layers\n          ?.map((l) => l.id)\n          .filter((id) => id.startsWith(\"osm-\"))}\n        onClick={handleMapClick}\n        // onLoad={onLoadCallback}\n        mapStyle=\"mapbox://styles/mapbox/light-v10\"\n        // mapStyle={null}\n        ref={mapRef}\n      >\n        {databaseTableNames.map((name) => (\n          <Source\n            type=\"vector\"\n            tiles={[\n              `${process.env.REACT_APP_OSM_API_BACKEND_URL}/${name}.mvt?limit=10000&bbox={bbox-epsg-3857}&epsg=3857`,\n            ]}\n            id={name}\n            key={name}\n          />\n        ))}\n        {layers?.map((layer) => (\n          <Layer key={layer.id} {...(layer as any)} />\n        ))}\n        {latitude && longitude && featureIds.length > 0 && (\n          <FeatureListPopup\n            featureIds={featureIds}\n            latitude={Number.parseFloat(latitude)}\n            longitude={Number.parseFloat(longitude)}\n            onClose={closePopup}\n          />\n        )}\n        <ZoomToDataOnLoad />\n        <NavigationControl style={{ right: \"1rem\", top: \"1rem\" }} />\n      </ReactMapGL>\n      {props.children}\n    </OverflowScrollContainer>\n  );\n}\n","import { Location } from \"history\";\nimport { uniq } from \"lodash\";\nimport { FeatureId } from \"../../model/Feature\";\n\nexport default function useFeatureIdsFromLocation(location: Location) {\n  const match = location.pathname.match(/^\\/(\\w+)\\/([\\w,:-]+)/);\n  let featureIds: FeatureId[] = [];\n  if (match && typeof match[1] === \"string\" && typeof match[2] === \"string\") {\n    const featureIdString = match[2];\n    if (match[1] === \"composite\") {\n      const components = uniq(featureIdString.split(\",\").sort());\n      featureIds = components.map((s) => {\n        const [source, id] = s.split(\":\");\n        return { source, id };\n      });\n    } else {\n      featureIds = [{ source: match[1], id: featureIdString }];\n    }\n  }\n  return featureIds;\n}\n","import {\n  FocusStyleManager,\n  HotkeysProvider,\n  HotkeysTarget2,\n} from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\nimport BlueprintDarkModeContainer from \"./core/BlueprintDarkModeContainer\";\nimport composeContexts, { ContextAndValue } from \"./core/composeContexts\";\nimport { useGlobalHotkeys } from \"./hooks/useGlobalHotkeys\";\nimport { Legend } from \"./Legend\";\nimport MapView from \"./map/MapView\";\nimport OverflowScrollContainer from \"./OverflowScrollContainer\";\n\nFocusStyleManager.onlyShowFocusOnTabs();\n\nconst AppBody = styled.div`\n  flex: 1;\n  overflow: hidden;\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n`;\n\nfunction App() {\n  // const { viewMenuButton, viewOptions } = useViewOptionsButton();\n  // const isDarkMode = useDarkMode();\n  // The panel showing the Linked Data vocabulary graph\n\n  const contexts: ContextAndValue<any>[] = [\n    // [RDFGraphContext, rdfStore],\n  ];\n  const history = useHistory();\n  const location = useLocation();\n\n  const onSelectFeature = React.useCallback<(_id: string) => void>(\n    (_id) => {\n      const url = `/features/${_id}`;\n      history.push(`${url}${location.search}`);\n    },\n    [history, location]\n  );\n\n  const sidebar = (\n    <OverflowScrollContainer\n      style={{ width: \"400px\", padding: \"1rem\", margin: \"0\" }}\n    >\n      <h1>Miki: Erforsche deinen Kiez</h1>\n      <Legend />\n    </OverflowScrollContainer>\n  );\n\n  const mapView = (\n    <MapView\n      featureId={undefined}\n      onSelectFeature={onSelectFeature}\n      visible={true}\n    />\n  );\n\n  const navbarAndBody = (\n    <>\n      <AppBody>\n        {/* {sidebar} */}\n        {mapView}\n      </AppBody>\n    </>\n  );\n\n  const hotkeys = useGlobalHotkeys();\n  return (\n    <HotkeysProvider>\n      <HotkeysTarget2 hotkeys={hotkeys}>\n        {({ handleKeyDown, handleKeyUp }) => (\n          <BlueprintDarkModeContainer\n            style={{\n              height: \"100%\",\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n            onKeyDown={handleKeyDown}\n            onKeyUp={handleKeyUp}\n          >\n            {composeContexts(contexts, navbarAndBody)}\n          </BlueprintDarkModeContainer>\n        )}\n      </HotkeysTarget2>\n    </HotkeysProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\nexport function useGlobalHotkeys() {\n  return React.useMemo(\n    () => [\n      {\n        combo: \"mod+z\",\n        global: true,\n        label: \"Undo\",\n        onKeyDown: () => {\n          alert(\"!!\");\n        },\n        allowInInput: false,\n        preventDefault: true,\n      },\n      {\n        global: true,\n        combo: \"mod+shift+z\",\n        label: \"Redo\",\n        onKeyDown: () => {\n          alert(\"!!\");\n        },\n        allowInInput: false,\n        preventDefault: true,\n      },\n    ],\n    []\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import dotenv from \"dotenv\";\nimport { enableAllPlugins, enablePatches } from \"immer\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\ndotenv.config();\nenableAllPlugins();\nenablePatches();\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}